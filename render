#!/usr/bin/env node

// Render the most recent journal entries for continuous reading.

// Reads a JSON formatted list of issues via STDIN. Such a list can be
// retrieved via /repos/:owner/:repo/issues?sort=created&direction=desc

const fs = require('fs')
const issues = JSON.parse(fs.readFileSync(0, 'utf-8') || '[]')
if (issues.length === 0) process.exit(1)

const categories = issues.reduce((acc, curr) => {
  const issueCats = curr.labels.reduce((acc, curr) => {
    if (curr.name !== 'entry') {
      acc.push({name: curr.name, desc: curr.description})
    }
    return acc;
  }, [])
  acc.push(...issueCats)
  return acc
}, [])
  .reduce((x, curr) => {
    const current = x.find((label => label.name == curr.name))
    if (current === undefined) {
      x.push(curr)
    }
    return x;
  }, []).sort((a, b) => {
    var nameA = a.name.toUpperCase(); // ignore upper and lowercase
    var nameB = b.name.toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }
  
    // names must be equal
    return 0;
  });

const sortedIssues = categories.reduce((acc, curr) => {
  const filtered = issues.filter((issue) => {
    const current = issue.labels.filter((label => label.name === curr.name));
    if (current.length > 0) {
      return issue
    }
  })
  acc.push({ cat: curr, entries: filtered })
  return acc
}, [])

// Write header
console.log(`# Today I Learned - A reference of stuff I\'ve picked up along the way`)
console.log(`## TABLE OF CONTENT\n`)
console.log(
  sortedIssues
  .map(issue => {
    const header = `### ${issue.cat.desc}\n`
    const entries = issue.entries.map((entry => {
      let link = entry.
      title.split(' ').join('-')
      return `* [${entry.
        title}](#${link})`
    }
    )).join('\n')
    return `${header}\n${entries}`
  })
  .join('\n\n')
)
console.log('\n\n<hr>\n\n')
console.log(
  sortedIssues
    .map(issue => {
      const header = `## ${issue.cat.desc}\n`
      const entries = issue.entries.map((entry => {
        return `### ${entry.
          title}\n${entry.body}\n\n[Discuss${
            entry.comments > 0 ? `(${entry.comment} comments)` : '' }](${entry.html_url})`
      }
      )).join('\n<hr>\n\n')
      return `${header}\n${entries}`
    })
    .join('\n\n<hr>\n\n')
)
